name: Publish multi-arch Docker images

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        base: ["debian:bullseye-slim", "debian:buster-slim", "ubuntu:jammy"]
        sourceforge: ["Y", "N"]
        exclude:
          - base: "ubuntu:jammy"
            sourceforge: "Y"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Release Tag
        run: |
          branch_or_tag=${{ github.ref_name }}
          echo "Branch or tag: ["$branch_or_tag"]"

          declare -A base_from_matrix

          base_from_matrix[debian:buster-slim]=buster
          base_from_matrix[debian:bullseye-slim]=bullseye
          base_from_matrix[ubuntu:jammy]=jammy

          base=${base_from_matrix[${{ matrix.base }}]}
          if [ -z "${base}" ]; then
            base=unknowndistro
          fi
          echo "Base from dictionary: "$base" from ["${{ matrix.base }}"] - will be overwritten as this is work in progress"

          declare -A sl_version_mapping

          sl_version_mapping[debian:buster-slim]=1.8
          sl_version_mapping[debian:bullseye-slim]=1.9.8
          sl_version_mapping[ubuntu:jammy]=1.9.9

          squeezelite_version=""
          distro_id=${base}
          if [ "${{ matrix.sourceforge }}" = "Y" ];
              then squeezelite_version="squeezelite-1.9.9-sourceforge";
          else
              version_from_dictionary=${sl_version_mapping[${{ matrix.base }}]}
              if [ -z "${version_from_dictionary}" ]; then
                version_from_dictionary=unknown
              fi
              echo "Version from dictionary: "$version_from_dictionary" from ["${{ matrix.base }}"]"
              squeezelite_version="squeezelite-${version_from_dictionary}";
          fi
          date=$(date '+%Y-%m-%d')
          slug=${{secrets.DOCKER_USERNAME}}/squeezelite
          tags="$slug:${squeezelite_version}-${distro_id},$slug:${squeezelite_version}-${distro_id}-${date}"
          if [ "${distro_id}" = "bullseye" ] && [ "${{ matrix.sourceforge }}" = "Y" ]; then
              tags="${tags},$slug:sourceforge-bullseye,$slug:latest";
          elif [ "${distro_id}" = "buster" ] && [ "${{ matrix.sourceforge }}" = "Y" ]; then
              tags="${tags},$slug:sourceforge-buster";
          elif [ "${distro_id}" = "buster" ] && [ "${{ matrix.sourceforge }}" = "N" ]; then
              tags="${tags},$slug:${distro_id},$slug:stable";
          elif [ "${distro_id}" = "bullseye" ] && [ "${{ matrix.sourceforge }}" = "N" ]; then
              tags="${tags},$slug:${distro_id}";
          elif [ "${distro_id}" = "jammy" ] && [ "${{ matrix.sourceforge }}" = "N" ]; then
              tags="${tags},$slug:${distro_id}";
          fi
          echo "Final tags: ["${tags}"]"
          echo "RELEASE_TAGS=${tags}" >> $GITHUB_ENV
          echo "TEST_BASE_IMAGE=HELLO" >> $GITHUB_ENV
          echo "GITHUB_ENV BEGIN"
          echo ${{ env.RELEASE_TAGS }}
          echo ${{ env.TEST_BASE_IMAGE }}
          echo "GITHUB_ENV END"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            BASE_IMAGE=${{ matrix.base }}
            DOWNLOAD_FROM_SOURCEFORGE=${{ matrix.sourceforge }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          push: true
          tags: ${{ env.RELEASE_TAGS }}
